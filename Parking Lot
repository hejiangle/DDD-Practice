@startuml

class ParkingLot <<Entity>> {
    string adress
    bool isAvailable

    Ticket receiveCar(Car car)
    Car getCar(Ticket ticekt)
    
}

class Car <<ValueObject>> {
    string plateNumber
}

class Ticket <<ValueObject>> {
    DateTime parkingStartTime
    int duration
    string plateNumber
    string parkingLotAdress
    string spaceCode
}

class Space <<Entity>> {
    string code
    Car parkingCar
    bool isAvailable
}

class ParkingBoy <<ValueObject>> {
    Ticket Parking(Car car, string parkingLotAdress = null)

    - Ticket ParkingInAnyParkingLot(Car car)
    - Ticket ParkingInSpecificParkingLot(Car car, string parkingLotAdress == null) 
}

interface IParkingLotRepostory <<Repository>> {
   {abstract} List<ParkingLot> getParkingLots()
   {abstract} void updateParkingLot(ParkingLot parkingLot)
   ... 
}

class ParkingBoyFactory <<Factory>> {
    {static} ParkingBoy createParkingBoy(List<ParkingLot> parkingLots)
}

class TicketFactory <<Factory>> {
    {static} Ticket createTicket(ParkingLot parkingLot, Car car, int duration)
}

ParkingBoyFactory .> IParkingLotRepostory : Actually, here is only data dependency.

IParkingLotRepostory "1" -- "*" ParkingLot : retrieve >
ParkingBoyFactory "1" -- "*" ParkingBoy : create >
ParkingBoy "*" . "*" ParkingLot : The relationship already be moved into factory and repository.

ParkingLot "1" o--> "*" Space
ParkingLot "1" --> "1" TicketFactory
TicketFactory -- Ticket : create >

Space "1" --> "1" Car

@enduml