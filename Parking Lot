@startuml

class ParkingLot {
    string address
    bool isAvailable

    Ticket ReceiveCar(Car car)
    Car GetCar(Ticket ticket)
    
}

class Car {
    string plateNumber
}

class Ticket {
    string plateNumber
    string parkingLotAddress
    
    bool IsValidTicket(ParkingLot parkingLot)
}

class ParkingBoyManager {
    ParkingBoy Assign(ParkingBoyType type)
}

class ParkingBoy {
    string Search()
    Ticket Parking(Car car, string parkingLotAddress)
}

class ParkingLotSearcherFactory {
    IParkingLotSearcher Create(ParkingBoyType type)
}

interface IParkingLotRepository {
   {abstract} List<ParkingLot> GetParkingLots()
   {abstract} ParkingLot GetParkingLotByAddress(string address)
   {abstract} void UpdateParkingLot(ParkingLot parkingLot)
   ... 
}

interface IParkingLotSearcher{
    {abstract} ParkingLot Search(List<ParkingLot> parkingLots)
}

class JuniorParkingLotSearcher {
    ParkingLot Search(List<ParkingLot> parkingLots)
}

class SeniorParkingLotSearcher {
    ParkingLot Search(List<ParkingLot> parkingLots)
}

enum ParkingBoyType {
    Junior,
    Senior
}

ParkingBoyManager -- ParkingBoy : create >
ParkingBoyManager ..> IParkingLotRepository
ParkingBoyManager ...> ParkingBoyType


ParkingBoy ..> ParkingLotSearcherFactory

ParkingLotSearcherFactory ..> IParkingLotSearcher
ParkingLotSearcherFactory .> ParkingBoyType
IParkingLotSearcher <|.. JuniorParkingLotSearcher
IParkingLotSearcher <|.. SeniorParkingLotSearcher


IParkingLotRepository "1" -- "*" ParkingLot : retrieve >

ParkingLot "1" o--> "*" Car
ParkingLot -- Ticket : create >

@enduml